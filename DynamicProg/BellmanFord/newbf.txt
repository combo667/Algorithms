#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

struct Edge
{

    int source, destination, weight;
};

struct Graph
{
    int V, E;

    struct Edge *array;
};

void BF(struct Graph *, int);
void output(int[], int);

struct Graph *createGraph(int V, int E)
{
    struct Graph *graph = (struct Graph *)malloc(sizeof(struct Graph));

    graph->V = V;

    graph->E = E;

    graph->array = (struct Edge *)malloc(graph->E * sizeof(struct Edge));

    return graph;
}

void output(int dist[], int n)
{

    int i;
    printf("Nodes:  \n");

    for (i = 0; i < n; ++i)
    {
        printf("%d  ", i);
    }
    printf("\nCost:\n");
    for (i = 0; i < n; i++)
    {
        printf("%d  ", dist[i]);
    }
}

void BF(struct Graph *graph, int src)
{
    int V = graph->V;

    int E = graph->E;

    int dis[V];
    int parent[V];

    int i, j;

    for (i = 0; i < V; i++)
        dis[i] = INT_MAX;

    dis[src] = 0;

    for (i = 1; i <= V - 1; i++)
    {
        for (j = 0; j < E; j++)
        {
            int u = graph->array[j].source;

            int v = graph->array[j].destination;

            int weight = graph->array[j].weight;

            if (dis[u] + weight < dis[v])
            {
                dis[v] = dis[u] + weight;
                parent[v] = u;
            }
        }
    }

    for (i = 0; i < E; i++)
    {
        int u = graph->array[i].source;

        int v = graph->array[i].destination;

        int weight = graph->array[i].weight;

        if (dis[u] + weight < dis[v])
        {
            printf("This graph contains negative edge cycle\n");
            return;
        }
    }

    output(dis, V);
}

int main(void)
{
    int V, E, S;

    printf("Enter number of vertices\n");
    scanf("%d", &V);

    printf("Enter number of edges\n");
    scanf("%d", &E);

    printf("Enter your source Node\n");
    scanf("%d", &S);

    struct Graph *graph = createGraph(V, E);

    int i;
    for (i = 0; i < E; i++)
    {
        printf("\nEnter edge %d u,v,cost\n", i + 1);
        scanf("%d", &graph->array[i].source);
        scanf("%d", &graph->array[i].destination);
        scanf("%d", &graph->array[i].weight);
    }

    BF(graph, S);

    free(graph->array);
    graph->array = NULL;
    free(graph);
    graph = NULL;
    return 0;
}